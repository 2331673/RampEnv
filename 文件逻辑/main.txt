main.py 主要实现了如下逻辑：

1. 环境初始化
- 使用 gymnasium.make 创建 merge-v0 环境，配置仿真参数（如车辆数、频率、屏幕尺寸等）。
- 将底层环境类替换为自定义的 MergeEnvV1，以支持自定义车辆生成和 step 逻辑。
- 重置环境，获取初始观测。

2. 控制器与车辆信息
- 实例化 RoadsideController，集成延迟模型、车辆管理、规划、执行、历史记录等模块。
- 检测主路车辆、匝道车辆和 ego 车，打印相关信息。

3. 仿真主循环
- 每步调用 controller.update()，完成通信延迟估计、车辆检测、排序、轨迹/速度/间距规划、控制执行、历史记录等。
- 判断 ego 车是否接近汇入点，如果是则执行变道动作（LANE_RIGHT），否则保持不动（IDLE）。
- 执行环境一步，渲染并保存当前帧。
- 检查是否有车辆发生碰撞，若有则警告。
- 如果仿真结束（done），提前退出循环。

4. 结果保存与可视化
- 将仿真过程保存为 gif 动画。
- 显示仿真最后一帧。
- 绘制所有车辆的目标速度与实际速度对比。
- 绘制速度误差和间距误差随时间变化的曲线，并标注阈值线。
- 显示并保存误差分析图，输出平均误差。

5. 返回结果
- 返回控制器对象和所有仿真帧，便于后续分析或复用。

各功能模块说明：
- controller.py：集成延迟、车辆管理、规划、执行、历史记录等功能。
- vehicle_manager.py：负责车辆检测、前车查找、主路相关车辆筛选等。
- planner.py：负责延迟修正、跟驰安全距离计算、轨迹/速度/间距规划。
- executor.py：负责根据规划结果调整车辆 target_speed，实现加减速、避撞等。
- history.py：负责记录和分析速度/间距误差等历史数据。

主流程：环境初始化 → 控制器集成 → 仿真循环（控制、规划、执行、记录、渲染）→ 结果保存与可视化。