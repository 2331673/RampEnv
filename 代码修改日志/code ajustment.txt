你的需求是实现**主路与匝道车辆的协同控制**，并且有如下核心约束和目标：

- 主路车辆最低速度60 km/h（约16.67 m/s），匝道车辆最低速度20 km/h（约5.56 m/s）。
- 主路和匝道车辆都根据安全时距调控速度，进入汇入区时安全时距加大为1.5秒。
- 协调控制时，优先尝试让匝道车插入主路最近的主路车前方，若不可行则尝试插入第二、第三辆主路车前方。
- 所有车辆速度不得低于最低速度。
- 若协调成功，发布速度调节命令给相关车辆，其余主路车辆仍按安全时距跟驰。

---

## 详细修改思路

### 1. **最低速度约束**
- 在速度规划和控制（如 `Planner.plan_trajectory`、`Executor.apply_control`）中，分别对主路和匝道车辆设置不同的最低速度下限。
- 例如：主路车辆 `min_speed = 16.67`，匝道车辆 `min_speed = 5.56`，所有速度规划和控制都需 `max(规划速度, min_speed)`。

### 2. **安全时距动态调整**
- 在 `Planner.calculate_safe_distance` 中，判断车辆是否在汇入区（如 `vehicle.position[0] >= merging_zone[0]`），若是则 `time_gap=2.5`，否则用默认值。
- 该逻辑可通过传递参数或在 `plan_trajectory` 内部判断实现。

### 3. **主路与匝道车辆排序与识别**
- 在 controller.py 的 `update` 方法中，主路车辆按距离汇入点从近到远排序，匝道车辆同理。
- 记录主路上距离汇入点最近、第二近、第三近的车辆。

### 4. **协调控制核心逻辑**
- 对于每一帧，依次尝试让匝道车插入主路最近、第二近、第三近车辆前方：
    1. 计算主路车辆与匝道车辆的当前状态（位置、速度）。
    2. 预测两车到达汇入点的时间，判断是否能通过调节速度让匝道车在主路车前方安全汇入（即两车到达汇入点的时间差满足安全时距，且两车速度均不低于最低速度）。
    3. 若可行，规划两车的目标速度，并下发控制命令。
    4. 若不可行，尝试下一个主路车辆，直到第三辆。
- 其余主路车辆继续按安全时距跟驰。

### 5. **速度规划与下发**
- 若协调成功，将目标速度写入 `planned_speeds`，并通过 `Executor.apply_control` 下发。
- 其余车辆按常规安全时距跟驰，速度不低于最低速度。

### 6. **代码结构建议**
- 在 `Planner` 中增加一个 `coordinate_merge` 方法，专门实现上述协调控制逻辑，返回需要被协调的车辆的目标速度。
- 在 `plan_trajectory` 中优先调用 `coordinate_merge`，对被协调车辆单独处理，其余车辆按常规处理。
- 在 `Executor` 中确保所有车辆速度不低于最低速度。

---

## 伪代码流程

1. **车辆排序**
    - 主路车辆按距离汇入点升序排序，匝道车辆同理。

2. **协调尝试**
    - 对于主路最近的3辆车，依次：
        - 计算主路车和匝道车到达汇入点的时间。
        - 判断是否能让匝道车在主路车前安全汇入（满足安全时距，且速度不低于最低速度）。
        - 若可行，规划两车目标速度，break。
        - 若都不可行，默认匝道车在主路车后汇入。

3. **目标速度下发**
    - 被协调车辆用协调结果，其余车辆按安全时距跟驰，所有车辆速度不低于最低速度。

4. **安全时距调整**
    - 判断车辆是否在汇入区，动态调整安全时距参数。

---

## 你需要关注的主要函数和模块

- `Planner.plan_trajectory`（主逻辑入口）
- `Planner.calculate_safe_distance`（动态调整安全时距）
- `Executor.apply_control`（速度下发与最低速度约束）
- controller.py 的 `update`（车辆排序与协调入口）

---